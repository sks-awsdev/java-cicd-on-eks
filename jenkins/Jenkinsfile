pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'sksawsdev/appx:latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/sks-awsdev/java-cicd-on-eks.git', branch: 'main'
            }
        }

        stage('Build & Unit Tests') {
            steps {
                dir('app') {
                    // Run package with tests
                    sh 'mvn clean package'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Checking SonarQube Quality Gate..."
                    def sonarQubeUrl = 'http://34.29.241.110:9000'
                    def response = httpRequest(
                        url: "${sonarQubeUrl}/api/qualitygates/project_status?projectKey=com.example:devops-app",
                        authentication: 'sonarqube-credentials-id',
                        httpMode: 'GET'
                    )
                    def qgStatus = readJSON text: response.content
                    def qgResult = qgStatus.projectStatus.status
                    echo "Quality Gate status: ${qgResult}"
                    if (qgResult != 'OK') {
                        error "Quality Gate failed: ${qgResult}"
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Doc-cred-global', passwordVariable: 'docpass', usernameVariable: 'docusr')]) {
                        sh "echo \"$docpass\" | docker login -u $docusr --password-stdin"
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh """
                   docker build -t $DOCKER_IMAGE ./app
                   docker push $DOCKER_IMAGE
                """
            }
        }
    }

    post {
        success {
            echo '✅ Build, scan, and push completed successfully.'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}
